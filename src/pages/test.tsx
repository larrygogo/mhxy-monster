import Head from 'next/head'
import React, {useEffect, useState} from "react";
import {initMonster, initMonsterWithSkill, mixMonster} from "@/src/libs/monster";
import WindowWrapper from "@/src/components/window-wrapper";
import {unique} from "@/src/utils";

const skillData: Skill[] = require('@/src/data/skill.json')
const monsterData: MonsterInintail[] = require('@/src/data/monster.json')

export default function Home() {
  const [m1, setM1] = useState<Monster>(initMonster(2))
  const [m2, setM2] = useState<Monster>(initMonster(3))
  const [m3, setM3] = useState<Monster>()

  const [skill1, setSkill1] = useState<number>(skillData[0].id)
  const [skill2, setSkill2] = useState<number>(skillData[0].id)

  const [type1, setType1] = useState<number>(2)
  const [type2, setType2] = useState<number>(3)

  useEffect(() => {

  }, [])

  const changeM1 = () => {
    const m = initMonster(type1)
    setM1(m)
  }

  const changeM2 = () => {
    const m = initMonster(type2)
    setM2(m)
  }

  const addM1Skill = () => {
    if (skill1) {
      const m = initMonsterWithSkill(m1.mid, unique([...m1.skills, skill1]))
      setM1(m)
    }
  }

  const addM2Skill = () => {
    if (skill2) {
      const m = initMonsterWithSkill(m2.mid, unique([...m2.skills, skill2]))
      setM2(m)
    }
  }

  const resetM1 = () => {
    if (m3) {
      setM1(m3)
    }
  }

  const resetM2 = () => {
    if (m3) {
      setM2(m3)
    }
  }

  const mix = () => {
    const m = mixMonster([m1, m2])
    setM3(m)
  }

  return (
    <div>
      <Head>
        <title>Test</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <WindowWrapper>
        <div style={{
          display: 'flex',
          gap: 20,
        }}>
          <div>
            <h1>{m1.name}</h1>
            <div style={{
              margin: '0 auto',
              maxWidth: 4 * 40,
              minHeight: 4 * 40,
              display: 'grid',
              gridTemplateColumns: 'repeat(4, 40px)',
              gridTemplateRows: 'repeat(4, 40px)',
            }}>
              {m1.skills.map(sid => {
                const skill = skillData.find(s => s.id === sid)
                // eslint-disable-next-line @next/next/no-img-element
                return <img key={sid} src={skill?.icon} alt={skill?.name}/>
              })}
            </div>
            <button onClick={changeM1}>洗炼</button>
            <div>
              <select value={skill1} onChange={e => setSkill1(Number(e.target.value))}>
                {skillData.map(s => <option key={s.id} value={s.id}>{s.name}</option>)}
              </select>
              <button onClick={addM1Skill}>添加技能</button>
            </div>
            <div>
              <select value={type1} onChange={e => setType1(Number(e.target.value))}>
                {monsterData.map(s => <option key={s.id} value={s.id}>{s.name}</option>)}
              </select>
              <button onClick={() => {
                setM1(initMonster(type1))
              }}>选择类型</button>
            </div>
          </div>
          <div>
            <h1>{m2.name}</h1>
            <div style={{
              margin: '0 auto',
              maxWidth: 4 * 40,
              minHeight: 4 * 40,
              display: 'grid',
              gridTemplateColumns: 'repeat(4, 40px)',
              gridTemplateRows: 'repeat(4, 40px)',
            }}>
              {m2.skills.map(sid => {
                const skill = skillData.find(s => s.id === sid)
                // eslint-disable-next-line @next/next/no-img-element
                return <img key={sid} src={skill?.icon} alt={skill?.name}/>
              })}
            </div>
            <button onClick={changeM2}>洗炼</button>
            <div>
              <select value={skill2} onChange={e => setSkill2(Number(e.target.value))}>
                {skillData.map(s => <option key={s.id} value={s.id}>{s.name}</option>)}
              </select>
              <button onClick={addM2Skill}>添加技能</button>
            </div>
            <div>
              <select value={type2} onChange={e => setType2(Number(e.target.value))}>
                {monsterData.map(s => <option key={s.id} value={s.id}>{s.name}</option>)}
              </select>
              <button onClick={() => {
                setM2(initMonster(type2))
              }}>选择类型</button>
            </div>
          </div>
        </div>
        <div style={{
          display: 'flex',
        }}>
          <div style={{marginTop: 20}}>
            <button onClick={mix}>合宠</button>
            {m3 && (
              <div>
                <h1>{m3.name}</h1>
                <p>{m3.wild ? '野生' : '宝宝'}</p>
                <div style={{
                  margin: '0 auto',
                  maxWidth: 4 * 40,
                  minHeight: 4 * 40,
                  display: 'grid',
                  gridTemplateColumns: 'repeat(4, 40px)',
                  gridTemplateRows: 'repeat(4, 40px)',
                }}>
                  {m3.skills.map(sid => {
                    const skill = skillData.find(s => s.id === sid)
                    // eslint-disable-next-line @next/next/no-img-element
                    return <img key={sid} src={skill?.icon} alt={skill?.name}/>
                  })}
                </div>
                <div>
                  <button onClick={resetM1}>替换1</button>
                  <button onClick={resetM2}>替换2</button>
                </div>
              </div>
            )}
          </div>
        </div>
      </WindowWrapper>
    </div>
  )
}
